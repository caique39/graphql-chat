{"version":3,"sources":["components/Message/index.js","components/ChatArea/index.js","components/Navbar/index.js","models/User.js","hooks.js","pages/Messenger/index.js","App.js","serviceWorker.js","index.js"],"names":["Text","styled","p","Sender","span","Container","div","Content","Message","text","sender","ownMessage","style","justifyContent","ChatArea","messages","username","lastElementRef","useRef","useEffect","current","scrollIntoView","behavior","map","index","key","ref","nav","Avatar","img","Username","h3","Phone","Navbar","phone","avatar","src","get","JSON","parse","localStorage","getItem","save","user","setItem","stringify","mutationCreateUser","gql","queryMessages","subscriptionMessage","window","innerHeight","WritingBox","form","Input","input","TextButton","button","mutationSendMessage","Messenger","name","useMutation","sendMessage","useState","newMessage","setNewMessage","localMessages","setLocalMessages","useQuery","data","loading","error","useSubscription","useMessages","inputRef","inputFocus","focus","onSubmit","e","preventDefault","variables","value","onChange","event","target","placeholder","App","UserModel","setUser","createUser","newUser","useUser","Boolean","location","hostname","match","URL","httpLink","HttpLink","uri","wsLink","WebSocketLink","options","reconnect","link","split","query","definition","getMainDefinition","kind","operation","client","ApolloClient","cache","InMemoryCache","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.785a3a62.chunk.js","sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\n\nconst Text = styled.p`\n  margin: 0;\n  font-size: 14px;\n  color: #212121;\n`;\n\nconst Sender = styled.span`\n  font-size: 12px;\n  color: red;\n`;\n\nconst Container = styled.div`\n  display: flex;\n  justify-content: flex-start;\n`;\n\nconst Content = styled.div`\n  padding: 4px 6px;\n  background-color: #fff;\n  border-radius: 8px;\n  margin: 4px 0;\n`;\n\nexport default function Message({ text, sender, ownMessage }) {\n  return (\n    <Container style={ownMessage ? { justifyContent: \"flex-end\" } : {}}>\n      <Content>\n        <Sender>{sender}</Sender>\n        <Text>{text}</Text>\n      </Content>\n    </Container>\n  );\n}\n","import React, { useEffect, useRef } from \"react\";\nimport styled from \"styled-components\";\nimport Message from \"../Message\";\n\nconst Container = styled.div`\n  background-image: url(https://wallpapercave.com/wp/wp3998720.jpg);\n  background-size: 100%;\n  flex: 1;\n  overflow-y: scroll;\n  padding: 8px 12px;\n`;\n\nexport default function ChatArea({ messages, username }) {\n  const lastElementRef = useRef(null);\n\n  useEffect(() => {\n    lastElementRef.current.scrollIntoView({ behavior: \"smooth\" });\n  }, [messages]);\n\n  return (\n    <Container>\n      {messages.map(({ text, sender }, index) => (\n        <Message\n          key={index}\n          text={text}\n          sender={sender}\n          ownMessage={sender === username}\n        />\n      ))}\n\n      <div ref={lastElementRef}></div>\n    </Container>\n  );\n}\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst Container = styled.nav`\n  background-color: #fff;\n  padding: 12px 16px;\n  display: flex;\n  align-items: center;\n`;\n\nconst Avatar = styled.img`\n  height: 35px;\n  width: 35px;\n  border-radius: 100px;\n  margin-right: 16px;\n`;\n\nconst Username = styled.h3`\n  font-size: 16px;\n  color: #212121;\n  margin: 0;\n`;\n\nconst Phone = styled.span`\n  font-size: 14px;\n  color: #757575;\n`;\n\nexport default function Navbar({ username, phone, avatar }) {\n  return (\n    <Container>\n      <Avatar src={avatar}></Avatar>\n      <div>\n        <Username>{username}</Username>\n        <Phone>{phone}</Phone>\n      </div>\n    </Container>\n  );\n}\n","const STORAGE_KEY = \"USER\";\n\nexport default {\n  get() {\n    return JSON.parse(localStorage.getItem(STORAGE_KEY));\n  },\n\n  save(user) {\n    localStorage.setItem(STORAGE_KEY, JSON.stringify(user));\n  }\n};\n","import { useEffect, useState } from \"react\";\nimport { useMutation, useQuery, useSubscription } from \"@apollo/react-hooks\";\nimport { gql } from \"apollo-boost\";\nimport UserModel from \"./models/User\";\n\nconst mutationCreateUser = gql`\n  mutation {\n    createUser {\n      name\n      id\n      avatar\n      phone\n    }\n  }\n`;\n\nconst queryMessages = gql`\n  query {\n    messages {\n      date\n      sender\n      text\n    }\n  }\n`;\n\nconst subscriptionMessage = gql`\n  subscription {\n    newMessage {\n      date\n      sender\n      text\n    }\n  }\n`;\n\nexport function useUser() {\n  const [user, setUser] = useState(UserModel.get());\n  const [createUser, { data, loading, error }] = useMutation(\n    mutationCreateUser\n  );\n\n  const { createUser: newUser } = data || {};\n\n  useEffect(() => {\n    if (!user) createUser();\n  }, []);\n\n  useEffect(() => {\n    if (newUser) {\n      UserModel.save(newUser);\n      setUser(newUser);\n    }\n  }, [newUser]);\n\n  return { user, loading, error };\n}\n\nexport function useMessages() {\n  const [localMessages, setLocalMessages] = useState([]);\n  const { data, loading, error } = useQuery(queryMessages);\n  const { messages } = data || {};\n\n  useEffect(() => {\n    if (messages) {\n      setLocalMessages(messages);\n    }\n  }, [messages]);\n\n  const { data: subscriptionData } = useSubscription(subscriptionMessage);\n  const { newMessage } = subscriptionData || {};\n\n  useEffect(() => {\n    if (newMessage) {\n      setLocalMessages(messages => [...messages, newMessage]);\n    }\n  }, [newMessage]);\n\n  return { messages: localMessages, loading, error };\n}\n","import React, { useState, useRef } from \"react\";\nimport styled from \"styled-components\";\nimport ChatArea from \"../../components/ChatArea\";\nimport Navbar from \"../../components/Navbar\";\nimport { useMutation } from \"@apollo/react-hooks\";\nimport { useMessages } from \"../../hooks\";\nimport gql from \"graphql-tag\";\n\nconst Container = styled.div`\n  height: ${window.innerHeight}px;\n  display: flex;\n  flex-direction: column;\n`;\n\nconst WritingBox = styled.form`\n  display: flex;\n  padding: 8px 16px;\n`;\n\nconst Input = styled.input`\n  flex: 1;\n  font-size: 16px;\n  outline: none;\n  background-color: #eee;\n  border-radius: 8px;\n  border: none;\n  padding-left: 12px;\n`;\n\nconst TextButton = styled.button`\n  padding: 12px;\n  background-color: #eee;\n  border: none;\n  color: #212121;\n  font-weight: bold;\n  border-radius: 4px;\n  margin-left: 8px;\n`;\n\nconst mutationSendMessage = gql`\n  mutation sendMessage($sender: String!, $text: String!) {\n    sendMessage(sender: $sender, text: $text) {\n      date\n      sender\n      text\n    }\n  }\n`;\n\nexport default function Messenger({ user }) {\n  const { name, avatar, phone } = user;\n\n  const [sendMessage] = useMutation(mutationSendMessage);\n\n  const [newMessage, setNewMessage] = useState(\"\");\n  const { messages } = useMessages();\n\n  const inputRef = useRef(null);\n\n  const createMessage = text => {\n    inputFocus();\n    sendMessage({ variables: { sender: name, text } });\n    setNewMessage(\"\");\n  };\n\n  const inputFocus = () => inputRef.current.focus();\n\n  return (\n    <Container>\n      <Navbar username={name} phone={phone} avatar={avatar}></Navbar>\n      <ChatArea messages={messages} username={name}></ChatArea>\n      <WritingBox\n        onSubmit={e => {\n          e.preventDefault();\n          createMessage(newMessage);\n        }}\n      >\n        <Input\n          value={newMessage}\n          onChange={event => setNewMessage(event.target.value)}\n          placeholder=\"Mensagem\"\n          ref={inputRef}\n        />\n        <TextButton>Enviar</TextButton>\n      </WritingBox>\n    </Container>\n  );\n}\n","import React from \"react\";\nimport Messenger from \"./pages/Messenger\";\n\nimport { useUser } from \"./hooks\";\n\nfunction App() {\n  const { user, error, loading } = useUser();\n\n  if (loading) return <h1>Loading...</h1>;\n  if (error || !user) return <h1>Error</h1>;\n\n  return <Messenger user={user} />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nimport { ApolloClient } from \"apollo-boost\";\nimport { ApolloProvider } from \"@apollo/react-hooks\";\n\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\n\nimport { split } from \"apollo-link\";\nimport { HttpLink } from \"apollo-link-http\";\nimport { WebSocketLink } from \"apollo-link-ws\";\nimport { getMainDefinition } from \"apollo-utilities\";\n\nconst URL = \"graphql-subscription-chat.herokuapp.com\";\n\n// Create an http link:\nconst httpLink = new HttpLink({\n  uri: `https://${URL}/graphql`\n});\n\n// Create a WebSocket link:\nconst wsLink = new WebSocketLink({\n  uri: `wss://${URL}`,\n  options: {\n    reconnect: true\n  }\n});\n\n// using the ability to split links, you can send data to each link\n// depending on what kind of operation is being sent\nconst link = split(\n  // split based on operation type\n  ({ query }) => {\n    const definition = getMainDefinition(query);\n    return (\n      definition.kind === \"OperationDefinition\" &&\n      definition.operation === \"subscription\"\n    );\n  },\n  wsLink,\n  httpLink\n);\n\nconst client = new ApolloClient({ link, cache: new InMemoryCache() });\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}